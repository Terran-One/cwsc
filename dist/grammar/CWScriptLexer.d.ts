import { ATN } from "antlr4ts/atn/ATN";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { Vocabulary } from "antlr4ts/Vocabulary";
export declare class CWScriptLexer extends Lexer {
    static readonly CONTRACT = 1;
    static readonly INTERFACE = 2;
    static readonly IMPORT = 3;
    static readonly IMPLEMENTS = 4;
    static readonly EXTENDS = 5;
    static readonly ERROR = 6;
    static readonly EVENT = 7;
    static readonly INSTANTIATE_NOW = 8;
    static readonly EXEC_NOW = 9;
    static readonly QUERY_NOW = 10;
    static readonly DELEGATE_EXEC = 11;
    static readonly INSTANTIATE = 12;
    static readonly EXEC = 13;
    static readonly QUERY = 14;
    static readonly REPLY = 15;
    static readonly FOR = 16;
    static readonly IN = 17;
    static readonly FROM = 18;
    static readonly STATE = 19;
    static readonly IF = 20;
    static readonly IS = 21;
    static readonly TRY = 22;
    static readonly CATCH = 23;
    static readonly ELSE = 24;
    static readonly NOT = 25;
    static readonly NONE = 26;
    static readonly MUT = 27;
    static readonly AND = 28;
    static readonly OR = 29;
    static readonly TRUE = 30;
    static readonly FALSE = 31;
    static readonly FN = 32;
    static readonly LET = 33;
    static readonly CONST = 34;
    static readonly FAIL = 35;
    static readonly RETURN = 36;
    static readonly STRUCT = 37;
    static readonly ENUM = 38;
    static readonly TYPE = 39;
    static readonly EMIT = 40;
    static readonly AS = 41;
    static readonly TILDE = 42;
    static readonly LPAREN = 43;
    static readonly RPAREN = 44;
    static readonly LBRACK = 45;
    static readonly RBRACK = 46;
    static readonly LBRACE = 47;
    static readonly RBRACE = 48;
    static readonly DOT = 49;
    static readonly COMMA = 50;
    static readonly D_QUEST = 51;
    static readonly QUEST = 52;
    static readonly BANG = 53;
    static readonly SEMI = 54;
    static readonly COLON = 55;
    static readonly D_COLON = 56;
    static readonly HASH = 57;
    static readonly AT = 58;
    static readonly AMP = 59;
    static readonly ARROW = 60;
    static readonly FAT_ARROW = 61;
    static readonly BAR = 62;
    static readonly S_QUOTE = 63;
    static readonly D_QUOTE = 64;
    static readonly EQ = 65;
    static readonly EQ_EQ = 66;
    static readonly NEQ = 67;
    static readonly PLUS = 68;
    static readonly PLUS_EQ = 69;
    static readonly MINUS = 70;
    static readonly MINUS_EQ = 71;
    static readonly MUL = 72;
    static readonly MUL_EQ = 73;
    static readonly DIV = 74;
    static readonly DIV_EQ = 75;
    static readonly MOD = 76;
    static readonly MOD_EQ = 77;
    static readonly LT = 78;
    static readonly LT_EQ = 79;
    static readonly GT = 80;
    static readonly GT_EQ = 81;
    static readonly POW = 82;
    static readonly Ident = 83;
    static readonly StringLiteral = 84;
    static readonly IntLiteral = 85;
    static readonly DecLiteral = 86;
    static readonly BoolLiteral = 87;
    static readonly CWSPEC_LINE_COMMENT = 88;
    static readonly CWSPEC_BLOCK_COMMENT = 89;
    static readonly LINE_COMMENT = 90;
    static readonly BLOCK_COMMENT = 91;
    static readonly WS = 92;
    static readonly channelNames: string[];
    static readonly modeNames: string[];
    static readonly ruleNames: string[];
    private static readonly _LITERAL_NAMES;
    private static readonly _SYMBOLIC_NAMES;
    static readonly VOCABULARY: Vocabulary;
    get vocabulary(): Vocabulary;
    constructor(input: CharStream);
    get grammarFileName(): string;
    get ruleNames(): string[];
    get serializedATN(): string;
    get channelNames(): string[];
    get modeNames(): string[];
    private static readonly _serializedATNSegments;
    private static readonly _serializedATNSegment0;
    private static readonly _serializedATNSegment1;
    static readonly _serializedATN: string;
    static __ATN: ATN;
    static get _ATN(): ATN;
}
