import { AsExprContext, AssignStmt_Context, AssignStmtContext, BlockContext, ConstStmt_Context, ConstStmtContext, ContractBlockContext, ContractDefnContext, DColonExprContext, DelegateExecStmtContext, DotExprContext, DotLHSContext, EmitStmtContext, EnumDefnContext, ErrorDefnBlockContext, ErrorDefnContext, EventDefnBlockContext, EventDefnContext, ExecDeclContext, ExecDefnContext, ExecStmtContext, ExprStmtContext, FailStmtContext, FnDefnContext, ForStmt_Context, ForStmtContext, Grouped2ExprContext, GroupedExprContext, IdentBinding_Context, IdentContext, IdentLHSContext, IfStmt_Context, ImportAllStmtContext, ImportItemsStmtContext, IndexExprContext, IndexLHSContext, InstantiateDeclContext, InstantiateDefnContext, InstantiateStmtContext, InterfaceDefnContext, LetStmt_Context, LetStmtContext, MapKeyDefnContext, ParamContext, QueryDeclContext, QueryDefnContext, ReplyDefnContext, ReturnStmtContext, SourceFileContext, StateDefnBlockContext, StateDefn_MapContext, StateDefn_ItemContext, StringLitContext, StructBindingContext, StructDefn_fnContext, TupleBindingContext, TypeDColonExprContext, TypePathContext, Variant_structContext, Variant_unitContext, FnCallExprContext, TypeFnCallExprContext, MulExprContext, AddExprContext, ElseClauseContext, CompExprContext, EqExprContext, NoneCheckExprContext, IsExprContext, InExprContext, ShortTryExprContext, CallOptionsContext, FnParamsContext, ParamListContext, TryCatchElseExpr_Context, CatchContext, CatchBindContext, AndExprContext, OrExprContext, QueryNowExprContext, FailExprContext, ClosureContext, ClosureParamsContext, TupleExprContext, StructExprContext, UnitVariantExprContext, IntLitContext, DecLitContext, BoolLitContext, NoneLitContext, OptionTContext, TypeLensContext, ListTContext, TupleTContext, StructDefnContext, TypeAliasDefnContext, TypeVariantContext } from './grammar/CWScriptParser';
import { ParserRuleContext } from 'antlr4ts';
import { AbstractParseTreeVisitor } from 'antlr4ts/tree/AbstractParseTreeVisitor';
import { CWScriptParserVisitor as ANTLRCWScriptParserVisitor } from 'grammar/CWScriptParserVisitor';
import * as AST from './ast';
export declare class CWScriptASTBuilderVisitor extends AbstractParseTreeVisitor<AST.AST> implements ANTLRCWScriptParserVisitor<AST.AST> {
    visitSourceFile(ctx: SourceFileContext): AST.SourceFile;
    visitContractDefn(ctx: ContractDefnContext): AST.ContractDefn;
    visitTypePath(ctx: TypePathContext): AST.TypePath;
    visitTypeVariant(ctx: TypeVariantContext): AST.TypeVariant;
    visitTypeLens(ctx: TypeLensContext): AST.TypeLens;
    visitOptionT(ctx: OptionTContext): AST.OptionT;
    visitListT(ctx: ListTContext): AST.ListT;
    visitTupleT(ctx: TupleTContext): AST.TupleT;
    visitStructDefn(ctx: StructDefnContext): AST.StructDefn;
    visitTypeAliasDefn(ctx: TypeAliasDefnContext): AST.TypeAliasDefn;
    visitInterfaceDefn(ctx: InterfaceDefnContext): AST.InterfaceDefn;
    visitImportAllStmt(ctx: ImportAllStmtContext): AST.ImportAllStmt;
    visitImportItemsStmt(ctx: ImportItemsStmtContext): AST.ImportItemsStmt;
    visitParam(ctx: ParamContext): AST.Param;
    visitStringLit(ctx: StringLitContext): AST.StringLit;
    visitContractBlock(ctx: ContractBlockContext): AST.ContractBlock;
    visitStateDefnBlock(ctx: StateDefnBlockContext): AST.StateDefnBlock;
    visitStateDefn_Item(ctx: StateDefn_ItemContext): AST.StateDefnItem;
    visitStateDefn_Map(ctx: StateDefn_MapContext): AST.StateDefnMap;
    visitFnDefn(ctx: FnDefnContext): AST.FnDefn;
    visitFnParams(ctx: FnParamsContext): AST.List<AST.Param>;
    visitMapKeyDefn(ctx: MapKeyDefnContext): AST.MapKeyDefn;
    visitInstantiateDefn(ctx: InstantiateDefnContext): AST.InstantiateDefn;
    visitInstantiateDecl(ctx: InstantiateDeclContext): AST.InstantiateDecl;
    visitExecDefn(ctx: ExecDefnContext): AST.ExecDefn;
    visitExecDecl(ctx: ExecDeclContext): AST.ExecDecl;
    visitQueryDefn(ctx: QueryDefnContext): AST.QueryDefn;
    visitQueryDecl(ctx: QueryDeclContext): AST.QueryDecl;
    visitErrorDefn(ctx: ErrorDefnContext): AST.ErrorDefn;
    visitStructDefn_fn(ctx: StructDefn_fnContext): AST.StructDefn;
    visitErrorDefnBlock(ctx: ErrorDefnBlockContext): AST.ErrorDefnBlock;
    visitEventDefn(ctx: EventDefnContext): AST.EventDefn;
    visitEventDefnBlock(ctx: EventDefnBlockContext): AST.EventDefnBlock;
    visitReplyDefn(ctx: ReplyDefnContext): AST.ReplyDefn;
    visitEnumDefn(ctx: EnumDefnContext): AST.EnumDefn;
    visitVariant_struct(ctx: Variant_structContext): AST.EnumVariantStruct;
    visitParamList(ctx: ParamListContext): AST.List<AST.Param>;
    visitVariant_unit(ctx: Variant_unitContext): AST.EnumVariantUnit;
    visitLetStmt_(ctx: LetStmt_Context): AST.LetStmt;
    visitLetStmt(ctx: LetStmtContext): AST.LetStmt;
    visitConstStmt_(ctx: ConstStmt_Context): AST.ConstStmt;
    visitConstStmt(ctx: ConstStmtContext): AST.ConstStmt;
    visitAssignStmt_(ctx: AssignStmt_Context): AST.AssignStmt;
    visitAssignStmt(ctx: AssignStmtContext): AST.AssignStmt;
    visitIfStmt_(ctx: IfStmt_Context): AST.IfStmt;
    visitElseClause(ctx: ElseClauseContext): AST.Block;
    visitBlock(ctx: BlockContext): AST.Block;
    visitForStmt_(ctx: ForStmt_Context): AST.ForStmt;
    visitForStmt(ctx: ForStmtContext): AST.ForStmt;
    visitExecStmt(ctx: ExecStmtContext): AST.ExecStmt;
    visitDelegateExecStmt(ctx: DelegateExecStmtContext): AST.DelegateExecStmt;
    visitInstantiateStmt(ctx: InstantiateStmtContext): AST.InstantiateStmt;
    visitCallOptions(ctx: CallOptionsContext): AST.List<AST.MemberVal>;
    visitEmitStmt(ctx: EmitStmtContext): AST.EmitStmt;
    visitReturnStmt(ctx: ReturnStmtContext): AST.ReturnStmt;
    visitFailStmt(ctx: FailStmtContext): AST.FailStmt;
    visitExprStmt(ctx: ExprStmtContext): AST.Expr;
    visitIdentBinding_(ctx: IdentBinding_Context): AST.IdentBinding;
    visitStructBinding(ctx: StructBindingContext): AST.StructBinding;
    visitTupleBinding(ctx: TupleBindingContext): AST.TupleBinding;
    visitIdentLHS(ctx: IdentLHSContext): AST.IdentLHS;
    visitDotLHS(ctx: DotLHSContext): AST.DotLHS;
    visitIndexLHS(ctx: IndexLHSContext): AST.IndexLHS;
    visitGroupedExpr(ctx: GroupedExprContext): AST.GroupedExpr;
    visitGrouped2Expr(ctx: Grouped2ExprContext): AST.Grouped2Expr;
    visitDotExpr(ctx: DotExprContext): AST.DotExpr;
    visitAsExpr(ctx: AsExprContext): AST.AsExpr;
    visitIndexExpr(ctx: IndexExprContext): AST.IndexExpr;
    visitDColonExpr(ctx: DColonExprContext): AST.DColonExpr;
    visitTypeDColonExpr(ctx: TypeDColonExprContext): AST.DColonExpr;
    visitFnCallExpr(ctx: FnCallExprContext): AST.FnCallExpr;
    visitTypeFnCallExpr(ctx: TypeFnCallExprContext): AST.FnCallExpr;
    visitMulExpr(ctx: MulExprContext): AST.BinOpExpr;
    visitAddExpr(ctx: AddExprContext): AST.BinOpExpr;
    visitCompExpr(ctx: CompExprContext): AST.BinOpExpr;
    visitEqExpr(ctx: EqExprContext): AST.BinOpExpr;
    visitNoneCheckExpr(ctx: NoneCheckExprContext): AST.NoneCheckExpr;
    visitIsExpr(ctx: IsExprContext): AST.IsExpr;
    visitInExpr(ctx: InExprContext): AST.BinOpExpr;
    visitShortTryExpr(ctx: ShortTryExprContext): AST.TryCatchElseExpr;
    visitTryCatchElseExpr_(ctx: TryCatchElseExpr_Context): AST.TryCatchElseExpr;
    visitCatch(ctx: CatchContext): AST.CatchClause;
    visitCatchBind(ctx: CatchBindContext): AST.CatchClause;
    visitAndExpr(ctx: AndExprContext): AST.BinOpExpr;
    visitOrExpr(ctx: OrExprContext): AST.BinOpExpr;
    visitQueryNowExpr(ctx: QueryNowExprContext): AST.QueryNowExpr;
    visitFailExpr(ctx: FailExprContext): AST.FailExpr;
    visitClosure(ctx: ClosureContext): AST.Closure;
    visitTupleExpr(ctx: TupleExprContext): AST.TupleExpr;
    visitClosureParams(ctx: ClosureParamsContext): AST.List<AST.Param>;
    visitStructExpr(ctx: StructExprContext): AST.StructExpr;
    visitUnitVariantExpr(ctx: UnitVariantExprContext): AST.UnitVariantExpr;
    visitIntLit(ctx: IntLitContext): AST.IntLit;
    visitDecLit(ctx: DecLitContext): AST.DecLit;
    visitBoolLit(ctx: BoolLitContext): AST.BoolLit;
    visitNoneLit(ctx: NoneLitContext): AST.NoneLit;
    visitIdent(ctx: IdentContext): AST.Ident;
    protected vlist<T extends AST.AST>(ctx: ParserRuleContext[]): AST.List<T>;
    protected defaultResult(): AST.AST;
}
export declare class CWScriptParser {
    static parse(sourceInput: string): AST.SourceFile;
}
